[package]
edition = { workspace = true }
name = "oprf"
version = "0.0.0"

[features]
alloc = ["elliptic-curve/alloc", "curve25519-dalek?/alloc", "primeorder?/alloc", "oprf-test/alloc"]
decaf448 = ["dep:ed448-goldilocks"]
primeorder = ["dep:primeorder"]
ristretto255 = ["dep:curve25519-dalek"]
ristretto255-ciphersuite = ["ristretto255", "dep:sha2"]
serde = [
	"dep:serde",
	"dep:serdect",
	"ed448-goldilocks?/serde",
	"curve25519-dalek?/serde",
	"oprf-test/serde",
]

[dependencies]
curve25519-dalek = { workspace = true, optional = true }
digest = { workspace = true }
ed448-goldilocks = { workspace = true, optional = true }
elliptic-curve = { workspace = true }
hash2curve = { workspace = true }
hybrid-array = { workspace = true }
primeorder = { workspace = true, optional = true }
rand_core = { workspace = true }
serde = { workspace = true, optional = true }
serdect = { workspace = true, optional = true }
sha2 = { workspace = true, optional = true }
zeroize = { workspace = true }

[dev-dependencies]
criterion = { workspace = true }
derive-where = { workspace = true }
hex = { workspace = true }
hex-literal = { workspace = true }
oprf = { workspace = true }
oprf-test = { workspace = true }
p256 = { workspace = true }
p384 = { workspace = true }
p521 = { workspace = true }
paste = { workspace = true }
rand = { workspace = true }
serde = { workspace = true, features = ["derive"] }
serde_json = { workspace = true }
serde_test = { workspace = true }
static_assertions = { workspace = true }
zeroize = { workspace = true, features = ["derive"] }

[lib]
bench = false

[[test]]
name = "test_vectors"
path = "tests/test_vectors/mod.rs"

[[bench]]
harness = false
name = "bench"

[lints]
workspace = true

[workspace]
default-members = [""]
members = ["", "test"]
package.edition = "2024"
resolver = "3"

[workspace.dependencies]
criterion = { version = "0.6", default-features = false, features = ["cargo_bench_support"] }
curve25519-dalek = { version = "5.0.0-pre.0", default-features = false, features = [
	"group",
	"zeroize",
] }
derive-where = "1"
digest = { version = "=0.11.0-rc.0", default-features = false }
ed448-goldilocks = { version = "=0.14.0-pre.2", default-features = false }
elliptic-curve = "=0.14.0-rc.10"
hash2curve = "=0.14.0-rc.0"
hex = { version = "0.4", default-features = false, features = ["alloc", "serde"] }
hex-literal = "1"
hybrid-array = "0.3"
oprf = { path = "", features = ["decaf448", "ristretto255-ciphersuite", "primeorder"] }
oprf-test = { path = "test" }
p256 = { version = "=0.14.0-pre.9", default-features = false, features = ["oprf", "serde"] }
p384 = { version = "=0.14.0-pre.9", default-features = false, features = ["oprf", "serde"] }
p521 = { version = "=0.14.0-pre.9", default-features = false, features = ["oprf", "serde"] }
paste = "1"
primeorder = "=0.14.0-pre.7"
rand = { version = "0.9", default-features = false, features = ["os_rng"] }
rand_core = { version = "0.9", default-features = false }
serde = { version = "1", default-features = false }
serde_json = "1"
serde_test = { git = "https://github.com/daxpedda/test" }
serdect = { version = "0.3", default-features = false }
sha2 = { version = "0.11.0-rc.0", default-features = false }
static_assertions = "1"
zeroize = "1.5"

[patch.crates-io]
curve25519-dalek = { git = "https://github.com/dalek-cryptography/curve25519-dalek", rev = "4f6188c674383beaf48065a1347970614cd2d6b6" }

[workspace.lints.rust]
# Rust groups.
let_underscore = { level = "warn", priority = -1 }
rust_2018_compatibility = { level = "warn", priority = -1 }
rust_2018_idioms = { level = "warn", priority = -1 }
rust_2021_compatibility = { level = "warn", priority = -1 }
rust_2024_compatibility = { level = "warn", priority = -1 }
unused = { level = "warn", priority = -1 }
# Rust lints.
ambiguous_negative_literals = "warn"
closure_returning_async_block = "warn"
deprecated_in_future = "warn"
deref_into_dyn_supertrait = "warn"
ffi_unwind_calls = "warn"
impl_trait_redundant_captures = "warn"
linker_messages = "warn"
macro_use_extern_crate = "warn"
meta_variable_misuse = "warn"
missing_copy_implementations = "warn"
missing_debug_implementations = "warn"
missing_docs = "warn"
non_ascii_idents = "warn"
redundant_imports = "warn"
redundant_lifetimes = "warn"
single_use_lifetimes = "warn"
trivial_casts = "warn"
trivial_numeric_casts = "warn"
unexpected_cfgs = { level = "warn", check-cfg = ["cfg(coverage_nightly)"] }
unit_bindings = "warn"
unnameable_types = "warn"
unreachable_pub = "warn"
unsafe_code = "deny"
# Not working with dev-dependencies.
#unused_crate_dependencies = "warn"
unused_import_braces = "warn"
unused_lifetimes = "warn"
unused_qualifications = "warn"
variant_size_differences = "warn"
# Allowed lints.
let_underscore_drop = "allow"

[workspace.lints.clippy]
# Clippy groups.
cargo = { level = "warn", priority = -1 }
nursery = { level = "warn", priority = -1 }
pedantic = { level = "warn", priority = -1 }
# Clippy restriction lints.
absolute_paths = "warn"
allow_attributes = "warn"
allow_attributes_without_reason = "warn"
arbitrary_source_item_ordering = "warn"
as_conversions = "warn"
as_pointer_underscore = "warn"
assertions_on_result_states = "warn"
cfg_not_test = "warn"
clone_on_ref_ptr = "warn"
create_dir = "warn"
dbg_macro = "warn"
decimal_literal_representation = "warn"
default_union_representation = "warn"
doc_include_without_cfg = "warn"
empty_drop = "warn"
empty_enum_variants_with_brackets = "warn"
empty_structs_with_brackets = "warn"
error_impl_error = "warn"
exit = "warn"
filetype_is_file = "warn"
float_cmp_const = "warn"
fn_to_numeric_cast_any = "warn"
format_push_string = "warn"
get_unwrap = "warn"
if_then_some_else_none = "warn"
impl_trait_in_params = "warn"
indexing_slicing = "warn"
infinite_loop = "warn"
large_include_file = "warn"
lossy_float_literal = "warn"
map_with_unused_argument_over_ranges = "warn"
mem_forget = "warn"
missing_assert_message = "warn"
missing_asserts_for_indexing = "warn"
mixed_read_write_in_expression = "warn"
mutex_atomic = "warn"
non_ascii_literal = "warn"
non_zero_suggestions = "warn"
partial_pub_fields = "warn"
pathbuf_init_then_push = "warn"
precedence_bits = "warn"
print_stderr = "warn"
print_stdout = "warn"
pub_without_shorthand = "warn"
rc_buffer = "warn"
rc_mutex = "warn"
redundant_type_annotations = "warn"
ref_patterns = "warn"
renamed_function_params = "warn"
rest_pat_in_fully_bound_structs = "warn"
return_and_then = "warn"
same_name_method = "warn"
single_char_lifetime_names = "warn"
str_to_string = "warn"
string_add = "warn"
string_lit_chars_any = "warn"
string_slice = "warn"
string_to_string = "warn"
suspicious_xor_used_as_pow = "warn"
todo = "warn"
try_err = "warn"
undocumented_unsafe_blocks = "warn"
unimplemented = "warn"
unnecessary_safety_doc = "warn"
unnecessary_self_imports = "warn"
unneeded_field_pattern = "warn"
unseparated_literal_suffix = "warn"
unused_result_ok = "warn"
unwrap_used = "warn"
use_debug = "warn"
verbose_file_reads = "warn"
# Allowed Clippy lints.
equatable_if_let = "allow"
explicit_deref_methods = "allow"
future_not_send = "allow"
module_inception = "allow"
module_name_repetitions = "allow"
redundant_pub_crate = "allow"
tabs_in_doc_comments = "allow"

[workspace.lints.rustdoc]
all = { level = "warn", priority = -1 }
